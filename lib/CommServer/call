#!/bin/bash

errorlog=/tmp/commserver-call-error

error () { # exit only if --exit NUMBER is given, no output to log if NUMBER is 1
    test -n "$1" -a $1 == --exit && shift && exitvalue=$1 && shift
    tmstamp=$(date --iso=sec)
    printf "%s %s %s\n" $tmstamp ${exitvalue:---} "$*" >&2
    test -n "$exitvalue" -a $exitvalue == 1 && exit 1
    printf "%s %s %s\n" $tmstamp ${exitvalue:---} "$*" >> $errorlog
    test -n "$exitvalue" && exit $exitvalue
    }

tob=/usr/local/bin/tob
self=.

# default values for options:
timeout=60
delay=0
priority=1
unset notify
unset notified

start_time=$(date +%s)

synopsis="$(basename $0) [--notify|--notified|-h|--help] [SITE [SITE_OPTIONS]]"

# parse and handle command line options:
while test -n "$1" -a "${1:0:1}" == '-'; do
    opt=$1 && shift
    case $opt in
        --notify)   notify=1;;
        --notified) notified=1;;
        --help)     exec awk '/^NAME$/{ok=1}ok{print}' $0;;
        -h)         echo $synopsis && exit 0;;
        *)          error --exit 11 unknown option: $opt;;
    esac
done

# assume first that the query is specified on the command line:
query=( call "$@" ) && unset query[0]

# run query loop on stdin if query was not given on command line:
test -n "$1" || {
    printf 'query: '
    while read -a query; do
        # special case: filter trailing \r character if present in last word:
        i=$((${#query[@]}-1))
        query[i]=${query[i]%$'\r'}
        cmd=$query
        unset query[0]
        case $cmd in
            call)   break ;;
            ls)     ls "${query[@]}" ;;
            q|quit) echo goodbye!; exit 0 ;;
            help)   awk '/^NAME$/{ok=1}ok{print}' $0 ;;
            h)      printf "    %s\n" \
                        'call SITE [OPTIONS] -- queue site to call' \
                        'ls [...]           -- list commserver object contents' \
                        'q|quit             -- exit' \
                        'h                  -- show short help' \
                        'help               -- show man page'
                    ;;
            *)      printf "\a?\n" ;;
        esac
        printf 'query: '
    done
    }

site=${query[1]} && unset query[1]

# remap query, converting '--opt=val' options to '--opt val' form:
query=(${query[@]//=/ })
qrystr="call $site ${query[@]}" # prepare for output in error messages

# parse query (note that some options may also have been on command line):
i=0; while test -n "${query[i]}"; do
    case ${query[i]} in
        --notify)       notify=1 ;;
        --notified)     notified=1 ;;
        --priority)     ((i+=1)); priority=${query[i]} ;;
        --timeout)      ((i+=1)); timeout=${query[i]} ;;
        --delay)        ((i+=1)); delay=${query[i]} ;;
        *)              error --exit 13 unknown option: ${query[i]} in "($qrystr)";;
    esac
    ((i+=1))
done

test -n "$notify" -a -n "$notified" &&
    error --exit 28 both --notify and --notified given in query "<$qrystr>"

# make sure site exists and is a radio site:
test -n "$site" || error --exit 26 no site specified in query "($qrystr)"
test -d "$site" || { # site does not resolve directly, so try harder...
    for dir in _ _/*; do
        test -d $dir/$site || continue
        site=$dir/$site
        break
    done
    test -d $site || error --exit 12 no site: $site
    # report sites found in the *temporary* _/transition/ tree:
    test $site != ${site#_/transition} && error resolved site as $site
    }
test -e $site/@radio || error --exit 27 no radio found as $site/@radio
# use site name or @id attribute if available for link names:
id=${site##*/}
test -e "$site/@id" && id=$(<$site/@id)
id=${id// /_} # just in case, replace any spaces with underscores

## assert: variable site points to a radio site, id can be used for link names

## if a callback is pending, the site is locked, and any but a callback
## query should fail.

test -e .q-callback/$id && { # callback is pending for site, fail anything else
    test -n "$notified" || error --exit 11 callback pending for $id, $site
    rm .q-callback/$id && exec $tob $site.call
    error --exit 17 failed to remove $id for $site from notified queue
    }

# the following error exit value was previously 29:
test -n "$notified" && error --exit 1 invalid or late callback for $id

# let the delay period expire...
test -n "$delay" -a $delay -gt 0 && sleep $delay

## a note on three approaches: 
##      1 -- simplest is to fail right here if server is busy with this site
##      2 -- we could loop here, up to timeout, waiting for the server
##      3 -- best would be to post site to spool with pid

## choose option 1 for now, fix later

# fail if the site is already in the spool or the queue:
test -d .q-spool/$id && error --exit 1 site $site is already spooled
test -d .q/$id && error --exit 1 site $site is already queued

# set the spool attributes for use by the run method:
echo $$ > $site/@call-pid
touch -d @$((start_time+timeout)) $site/call-timeout
echo $priority > $site/@call-priority

# remove old pass/fail attributes that run method will set:
for attr in $site/@call-{passed,failed}; do
    test -e $attr && rm $attr
done

# now set link to site object in spool:
# ... but first check that it's not already there!
test -L .q-spool/$id && error --exit 22 site $site is already in spool on 2nd check
ln -s ../$site .q-spool/$id

# check to make sure the link actually points to a site object:
test -e .q-spool/$id/@radio || {
    rm .q-spool/$id
    error "LOCK: $(/bin/ls -l $site/@LOCK)"
    error "PWD: $PWD"
    error --exit 23 failed to resolve $site site via symlink: .q-spool/$id
    }

# make sure the queue manager is running:
( set -C; >.@run-pid && { ($tob $self.run &); }; set +C;) 2>/dev/null

# and WAIT for the queue manager to give a go or no-go:
until test -e $site/@call-passed -o -e $site/@call-failed; do
    sleep 1
done

# @call-failed means that the site timed out
test -e $site/@call-failed && echo FAILED && exit 1

# check that passed attribute is actually still set, just in case:
test -e $site/@call-passed || error --exit 24 should not happen

# check that passed attribute contains this pid
test $(<$site/@call-passed) == $$ ||
    error --exit 30 $id: pid $(<$site/@call-passed) was chosen, not $$

# if a callback is requested, set a short timeout for it:
test -n "$notify" && {
    now=$(date +%s)
    future=$((now+10))
    touch -d @$future $site/call-timeout
    test -L .q-callback/$id && error --exit 25 site $site already in notified queue
    ln -s ../$site .q-callback/$id
    # inform client that the site can be called again with --notified
    echo PASSED
    # check to make sure the link actually points to a site object:
    test -e .q-callback/$id/@radio || {
        errlog=/tmp/commserver-run-q-callback-error
        msg=$(printf "%s %s: %s symlink failed\n" \
            $(date +%j:%H:%M:%S) $TOB_method .q-callback/$id)
        echo "$msg" >> $errlog
        stat .q-callback/$id >> $errlog
        ls .q-callback/$id/ >> $errlog
        ls $site/ >> $errlog
        }
    exit 0
    }

exec $tob $site.call

exit 0

NAME
    CommServer.call -- request a site to call

SYNOPSIS
    commserver.call [OPTIONS] [QUERY]

DESCRIPTION
    Providing a high level interface to the commserver, the call method
    takes a request to call a site and places the site in the server's
    input spool.  The run method moves the site from the input spool
    into its queue, and evenutally fails or passes the request, after
    which the call method resumes control.  If passed, a route was
    also locked for the target site, so those resources are not available
    for other processes.

    After being passed by the CommServer.run method, CommServer.call
    invokes the target site's RadioSite.call method or, if --notify was
    given, places site in the 'callback' queue and exits.

    If a callback is pending, any CommServer.call on the site lacking
    the --notified option will fail.  If --notified is given, the site
    is removed from the callback queue and RadioSite.call is invoked.

DUAL INTERFACE
    CommServer.call currently accepts queries fully specified on the
    command line, but it also will run a query dialog if no command
    line query is found.  (See also BUGS, below!)

    An application of the query dialog uses the /etc/inetd.conf 
    facility to accept connections from network hosts.  Three different
    ports can be configured, one to invoke call with no options, one
    with the --notify option, and one with --notified..

OPTIONS
    --notify
    --notified
    --priority N -- N is any integer, higher wins
    --timeout N  -- N in seconds before call query will time out and fail
    --delay N    -- N in seconds before query is acted on

QUERY DIALOG
    A prompt is displayed to the client, and several commands can
    be used:

        call SITE [--notify] [--priority N] [--timeout N] [--delay N]]
        call SITE --notified
        ls [...]           -- list commserver object contents
        h                  -- show short help
        help               -- show man page
        q|quit             -- exit

BUGS
    The dual interface complicates this method, and the query dialog
    should be broken out into a separate method.

AUTHOR
    Ken.Irving@alaska.edu 2010


