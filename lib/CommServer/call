#!/bin/bash

error() { echo "$@" >&2; exit 1; }

tob=/usr/local/bin/tob
self=.
spool=.q-spool

# default values for options:
timeout=60
delay=0
unset notified

# parse and handle command line options:
while test -n "$1" -a "${1:0:1}" == '-'; do
    opt=$1 && shift
    case $opt in
        --notified)
            notified=1
            ;;
        --help)
            awk '/^NAME$/{ok=1}ok{print}' $0
            exit 0
            ;;
        -h) echo $(basename $0) [--notified|-h|--help] [SITE [SITE_OPTIONS]]       
            exit 0
            ;;
        *)  error unknown option: $opt;;
    esac
done

query=( call "$@" )
unset query[0]

# skip dialog if a non-option argument (the site to call) is present:
# test -n "$1" || while read -a query -p "query: "; do
test -n "$1" || {
    printf 'query: '
    while read -a query; do
        cmd=$query
        unset query[0]
        case $cmd in
    
            call)   break
                    ;;
    
            ls)     ls "${query[@]}"
                    ;;
    
            q|quit) echo goodbye!
                    exit 0
                    ;;
    
            h)      printf "    %s\n" \
                        'call SITE [OPTIONS] -- queue site to call' \
                        'ls [...]           -- list commserver object contents' \
                        'q|quit             -- exit' \
                        'h                  -- show short help' \
                        'help               -- show man page'
                    ;;
    
            help)   awk '/^NAME$/{ok=1}ok{print}' $0
                    ;;
    
            *)      printf "\a?\n"
                    ;;
    
        esac
        printf 'query: '
    done
    }

site=${query[1]}
unset query[1]

# echo call $site with args: "${query[@]}" 
test -d $site || error no site: $site

# echo DEBUG 1 $site

i=2 # skip entries 0 ('call') and 1 (the site)
while test -n "${query[$i]}"; do
    case ${query[$i]} in
        --notify)
            notify=1
            ;;

        --notified)
            notified=1
            ;;

        --priority)
            i=$(($i+1))
            priority=${query[$i]}
            ;;

        --timeout)
            i=$(($i+1))
            timeout=${query[$i]}
            ;;

        --delay)
            i=$(($i+1))
            delay=${query[$i]}
            ;;

        *)  error unknown option: ${query[$i]}
            ;;
    esac
    i=$(($i+1))
done

# create tag as short form of site name, in case it spans directories:
tag=${site##*/}

if test -e .q-notify-pool/$tag; then
    # link exists, so check for --notified...
    test -n "$notified" ||
        error call $site missing --notified option
    # waiting for notified request, got it, so do it:
    exec $tob $site.call
else
    # link does not exist, so make sure --notified was not given
    test -n "$notified" &&
        error $site not expecting notified contact
fi

# echo DEBUG 2 $tag

# check that the site isn't already in the spool or queue:
test -d .q-spool/$tag && error site $site is already spooled
test -d .q/$tag && error site $site is already queued

# now set attributes in the site object for the spool and queue operations:

# delete any existing queue attributes, with prefix 'q-':
rm $site/q-*

now=$(date +%s)
test -n "$delay" && test $delay -gt 0 && {
    future=$(($now+$delay))
    touch -d @$future $site/q-DELAY
    }

test -n "$timeout" || error missing required timeout value
# TODO: check that $timeout and $delay are integer values!!
future=$(($now+$delay+$timeout))
touch -d @$future $site/q-TIMEOUT

test -n "$priority" && touch $site/q-PRIORITY=$priority

# now set link to site object in spool:
ln -s ../$site .q-spool/$tag

# make sure the queue manager is running:
(   set -C
    >.@PID && {
        echo START RUN METHOD
        ($tob $self.run &)
        }
    set +C
    ) 2>/dev/null

# and WAIT for the queue manager to give a go or no-go:
until test -e $site/q-PASSED -o -e $site/q-FAILED; do
    sleep 1
done

test -e $site/q-FAILED && exit 1

echo site passed

test -e $site/q-PASSED || error should not happen

test -n "$notify" && {
    now=$(date +%s)
    future=$(($now+10))
    touch -d @$future $site/q-TIMEOUT
    ln -s ../$site .q-notify-pool/$tag
    echo ready to call $site
    exit 0
    }

$tob $site.type

echo DO: exec $tob $site.call

exec $tob $site.call

exit 0

NAME
    CommServer.call -- dialog to queue a site to call

DESCRIPTION
    Adds the specified site to the queue spool, then runs the
    pick-site-to-call method which moves the site from the spool into
    the queue.

    The method accepts a few command line options, and the command line
    can also be used to specify a site to query (and also options to that
    query) as an alternative to the query dialog.

COMMAND LINE OPTIONS
    --as-notified
        must be specified in the call is in response to a previous call
        requesting notification

    -h
        show brief synopsis, then exit
    
    --help
        show this manpage, then exit
    
COMMANDS
    Enter one of the following at the 'query:' prompt:

    call SITE [--notify] [--priority NUMBER] [--timeout SECONDS] [--delay SECONDS]
        check that site exists, create queue object in spool
        see SITE OPTIONS below

    ls [...]
        list contents of commserver object

    q
    quit
        exit with status 0

    h
        show brief synopsis

    help
        show manpage

SITE OPTIONS
    --notify
        after site is chosen and a route locked, don't initiate connection
        but notify client that a connection can be made
    
    --priority NUMBER
        optional priority number to favor one site over another; no default
    
    --delay SECONDS
        specify how long to leave site in the queue spool before moving
        it to the active queue; default is 0 seconds

    --timeout SECONDS
        specify how long attempt to call should persist in queue
        default is 60 seconds
    
SPECIAL ATTRIBUTES
    The following files are created as attributes in the site object to
    communicate settings to other methods.

    q-PRIORITY
    q-DELAY
    q-TIMEOUT
    
AUTHOR
    Ken.Irving@alaska.edu 2010

