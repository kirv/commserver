#!/bin/bash
# CommServer.run -- run the server, reading from .q-spool into .q until empty

# exit if an instance is already running:
test -s .@PID && exit 1
trap 'rm .@PID' TERM EXIT
echo $$ > .@PID

# close stdin, redirect stdout and stderr to files:
exec 0>&- 1>.@OUT 2>.@ERR

error() { echo "$@" >&2 && exit 1; }

tob=/usr/local/bin/tob

queue=.q
spool=.q-spool

# read settings from config file:
test -e : -o -e .: && {
    rcfile=.: && test -e : && rcfile=: # rc file : supersedes .:
    unset ok
    while read -r tag value; do
        test ${tag:0:1} == '[' && {
            block=$tag
            continue
            }
        test "$block" == "[$TOB_method]" || continue
        value=${value#*=}
        case $tag in
            sleep_sec) sleep_sec=${sleep_sec:-$value};;
            random_mod) random_mod=${random_mod:-$value};;
            random_ofs) random_ofs=${random_ofs:-$value};;
            *) error unknown attribute: $tag;;
        esac
    done < "$rcfile"
    }

test -n "$sleep_sec" || sleep_sec=2

process_spool() { # move sites into queue unless delay, return 0 if empty
    for site in .q-spool/*; do
    
        test "${site##*/}" == '*' && return 0
    
        echo spooled: $site
    
        # leave site in spool if also in queue:
        test -e $queue/${site#*/} && continue
    
        # move site into queue if no delay attribute:
        test -e $site/q-DELAY || {
            mv $site $queue && continue
            }
    
        # move site into queue if delay has expired:
        test $site/q-DELAY -nt .@NOW || {
            mv $site $queue && continue
            }
    done
    return 1
    }

process_queue() { # return value: 0 if empty, else 1
    unset choices
    for site in $queue/*; do
    
        test "${site#*/}" == '*' && return 0 
    
        echo queued: $site
    
        # remove site from queue if timeout has elapsed:
        test $site/q-TIMEOUT -nt .@NOW || {
            touch $site/q-FAILED
            rm $site
            echo timeout: $site
            continue
            }
    
        # workaround bug that .q/site.foo has to be .q.site.foo:
        tsite=${site/\//.}
        # aquire a route or skip this site:
        $tob $tsite.lock-route || continue

      # echo $site is locked
    
        # save, then release locked route
        route=( $(<$site/@LOCK) )
      # echo route: "${route[@]}"
      # echo $tob $tsite.unlock-route
        $tob $tsite.unlock-route

      # echo $site is unlocked
    
        # calculate one or more metrics based on the route...
    
      # echo metrics...
    
        # metric for number of hops over minimum:
        min_hops=1
        test -e $site/@min-hops && min_hops=$(<$site/@min-hops)
        extra_hops=$(( (${#route[@]} - $min_hops) * 10 ))
    
        # age is time in seconds since last successful session:
        age=0
      # test -e $site/@session &&
      #     age=$(($now - $(stat -c %Y $site/@session)))
        test -e $site/@last-session-end-time &&
            age=$(($now - $(<$site/@last-session-end-time)))
        # convert age to crude/approximate logarithmic value:
        age=$(( (${#age} - 1)* 10 + ${age:0:1} ))
    
        sum=$(( $age - $extra_hops ))
    
        test -e $site/q-PRIORITY && 
            sum=$(( $sum + $(<$site/q-PRIORITY) ))
    
        test -n "$random_mod" &&
            sum=$(( $sum + $RANDOM % $random_mod + $random_ofs ))
    
        # prevent values < 0 in case of trouble with leading - sign:
        test $sum -lt 0 && sum=0

        echo METRIC-SITE: $sum-$site
        choices="$choices $sum-$site"
    done
    return 1
    }

check_notify_pool() { # check candidates for timeout
    for site in .q-notify-pool/*; do
    
        test "${site##*/}" == '*' && return 0
    
        echo notified: $site
    
        # move site into queue if delay has expired:
        test $site/q-TIMEOUT -nt .@NOW && continue

        # timeout has expired, so unlock route and remove site from pool
        s=$(readlink -f $site)
        rm $site
        $tob $s.unlock-route

        echo timeout: $site removed from notify-pool, unlocked

        ## NOTE: the above may have/be a race condition, so needs work...
        ## we remove the link before unlocking the route... maybe that's ok?
    
    done
    return 1
    }

while true; do
    # quit if the pid file is not set
    test -s .@PID || error pid file .@PID was removed or reset

    date +%s > .@NOW
    now=$(<.@NOW)

  # process_spool && process_queue && check_notify_pool && exit 0

    process_spool && process_queue && check_notify_pool && {
        echo nothing in queue, spool, or notify-pool
        exit 0
        }

  # echo something is in the spool or queue
    test -n "$choices" || {
      # echo sleep...
        sleep $sleep_sec && continue
        }
    echo CHOICES: $choices
    
    # sort choices and select the one with the greatest value:
    choice=$(printf "%s\n" $choices | sort -n | tail -n 1)
    
  # echo DEBUG choices: {$choices}
  # echo DEBUG choice: {$choice}
    
    echo CHOSEN: $choice

    site=${choice#*-}
    tsite=${site/\//.}
    
  # echo DEBUG site: {$site}
  # echo DEBUG tsite: {$tsite}

    test -e $site || error ERROR: $site not found
    
    echo aquiring lock on route...

    $tob $tsite.lock-route $tsite || {
        # should have worked, so just bail and better luck next time
        echo failed to aquire route to $site... >&2
        sleep $sleep_sec
        continue
        } 

    echo route is locked
    
    # ASSERT: the route to $site is locked, ready to go!
    # should we check that this route is the same as the one checked above? Nah.
    
    touch $site/q-PASSED
    
    # remove site from queue:
    rm $site || error failed to dequeue $site...
    echo dequeued: $site

    sleep $sleep_sec
done

exit

NAME
    CommServer.pick-site-to-call -- process call queue spool and queue

DESCRIPTION
    The goal is to select a site to call after weighing various metrics,
    including time since last contact, caller-assigned priority, availability
    cost of routes, and perhaps others.

    The CommServer.call method provides the caller interface to this method,
    creating an object in the queue spool.  This method moves objects from
    the spool into the queue, unless the optional delay interval has not 
    elapsed.

    Each object in the queue is evaluated along with the others, and one
    chosen...

    Objects are removed from the queue if the timeout period has elapsed.

IMPLEMENTATION NOTES
    The queue is a form of priority queue, where the effective priority
    metric is not fully defined on entry to the queue, but also depends
    dynamically with availability and cost of routing nodes and on other
    factors.

    The age in seconds is converted to something like a logarithm in base
    10 by concatenating the number of digits minus 1 and the first digit.

OPTIONS
    
AUTHOR
    Ken.Irving@alaska.edu 2010


