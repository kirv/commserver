#!/bin/sh

self=.

test $n "$1" && $1 == --max-hops && shift && max-hops=$1 && shift

## called with no arguments, generate the @routes property:
test -n "$1" || {
    tm=$(date +%s)
    $0 $(readlink -f $PWD) > @routes
    tm=$(($(date +%s) - $tm))
    echo update routes n=$(wc -l < @routes) tm=$tm |
        tob log.store
    tob $self.rank-routes
    exit 
    }

## stop following links once a base is reached:
test -e %ip2radio && {
    # drop the first node, output the rest in reverse order:
    shift 
    result=$1
    shift
    while test -n "$1"; do
        result="$1 $result"
        shift
    done
    echo $result
    exit 0
    }

## stop following links if link count exceeds max-hops limit
test -n "$max_hops" ||
    get-attr @max-hops && max_hops=$attr
test $# -le $max_hops ||
    exit 0

## check & recurse into each link in this object
for link in linkto/*; do

    test -L $link/! -o -d $link/! ||
        exit 1

    link=$(readlink -f $link/!)

    ## skip any link already visited:
    for hop in $*; do
        test $hop == $link &&
            continue 2
    done

    # recurse by invoking this method by name using thinobject dispatcher:
    tob $link.${0##*/} $* $link ||
        exit 1

done
    
