#!/usr/bin/perl
# !/usr/bin/perl -w
use strict;
use warnings;

use Expect;
use FreeWave_Radio::Callbook;

use constant DEFAULT_PROMPT_RETRIES => 20;

# use constant CALL_SUMMARY_FILE => "/var/local/log/commserver-call-summary-new";
use constant CALL_SUMMARY_FILE => '@call-summary';

my $t0 = time;
my $time_ready2dial;
my $time_connect;

my @call_summary;

my $prompt;
my $retries = DEFAULT_PROMPT_RETRIES;
my $tag;

while ( $ARGV[0] =~ m/^-/ ) {
    my $opt = shift;
    if ( $opt eq '--prompt' ) {
        $prompt = shift;
        $prompt =~ s/^\\//;
        warn "PROMPT length :" . length $prompt . "\n";
        warn sprintf "PROMPT:%s\n", "$prompt";
        }
    elsif ( $opt eq '--tag' ) {
        $tag = shift;
        }
    elsif ( $opt eq '--retries' ) {
        $retries = shift;
        }
    else {
        die "unknown option: $opt\n";
        }
    }

set_property( '.@pid', $$ );

my $radio = shift;
$radio = check_radio_number($radio)
    or die "invalid number: $radio\n";

$tag = $radio unless defined $tag;

my @route = @ARGV;

die "no lock found\n" unless -e "\@LOCK";
die "lock is empty\n" unless -s "\@LOCK";

# confirm that each node is locked and contains $tag:
foreach my $node ( @route ) {
    die "no lock found at $node\n"
        unless -e "$node/\@LOCK";
    if ( defined $tag && file_contents("$node/\@LOCK") ne $tag ) {
        my $content = file_contents("$node/\@LOCK");
        die "$node/\@LOCK contains $content, not $tag\n";
        }
    }

# ASSERT: all locks exist and contain the $tag if given

set_property( '@tag', $tag );

set_property( '@state', 'init');

my ($host, $port);
foreach ( file_contents("\%ip2radio") ) {
    $host = $1 if m/host\s*=\s*(\S+)/;
    $port = $1 if m/port\s*=\s*(\S+)/;
    }

warn "host: $host\n";
warn "port: $port\n";

# resolve node radio numbers from node file path names in @route:
my @repeater;
for my $node ( @route ) {
    die "$node/\@radio not found\n" 
        unless -e "$node/\@radio";

    my $number = file_contents("$node/\@radio");

    $number = check_radio_number($number) 
        or die "invalid repeater radio number: $number\n";
    push @repeater, $number;
    }

my $rep_path = "@repeater";

if ( 1 ) { # debug settings
    print "prompt: $prompt\n";
    print "host: $host\n";
    print "port: $port\n";
    print "route:\t<", join("\t", @route), ">\n";
    print "radios:\t<", join("\t", $radio, @repeater), ">\n";
  # exit 0;
    }

open STEPS, '>', '@session-steps' or die $!;
select STEPS;
$| = 1; ## turn buffering off 
select STDOUT;

log_steps(time);
my $ob = $ENV{TOB_object};
$ob =~ s{.*/}{};
log_steps(sprintf "%s.%s %s", $ob, $ENV{TOB_method}, $tag);

$| = 1; ## turn buffering off on STDOUT to client

push @call_summary, $host, $tag;

my $exp = Expect->new();
# $exp->exp_internal(1);
$exp->raw_pty(1); # sets the pty to raw mode

$exp->log_stdout(0); ## 0=supress, 1=copy process output to stdout

$exp->log_file( '@radio-config-log', 'w');

set_property( '@state', '>base?');

my @nc_options = ();

if ( $host =~ m/^http:.+/ ) { # special case: URL contains dynamic ip
    require LWP::Simple;
    my $urlfile = LWP::Simple::get($host) or
        die qq(no host file found at "$host"\n);
    $host = (split("\n", $urlfile))[0]
        or die qq(no host ip found at "$host"\n);
  # print qq(DEBUG: obtained ip "$host"\n);
    }

log_steps("connecting to base radio");

$exp->spawn("/bin/nc", @nc_options, $host, $port)
    or die "Cannot spawn nc: $!\n";

$exp->restart_timeout_upon_receive(1);

my $timeout = 10;
$timeout = file_contents('@timeout-config-phase')
    if -e '@timeout-config-phase';

## send a couple of escapes in case radio is left in config mode...
$exp->send("\e\e");

set_property( '@state', 'config');

## ASSERT: radio should be in command mode

log_steps("sending radio setup commands...");

# invoke radio setup menus:
$exp->send("ATXS");
$exp->expect($timeout, "Enter Choice")
    or timed_out('no radio setup menu');

# open callbook:
$exp->send("2");
$exp->expect($timeout, "Enter all zeros") # (000-0000) as your last number in list
    or timed_out('no radio callbook menu');

my $callbook = FreeWave_Radio::Callbook->new($exp->before());
my $entry;
$entry = $callbook->repeater_path_entry($rep_path) if defined $rep_path;

log_steps("using repaater path $entry") if defined $entry;

my $entry_type = defined $entry ? 'exists' : 'new';

unless ( defined $entry ) { # existing repeater path was not found, so configure...
    $entry = '8';
    log_steps("configuring repaater path 8...");
    # clear entry #9:
    $exp->send("9");
    $exp->expect($timeout, "9") # number is echoed
        or timed_out('no callbook menu command "9" echo, zeroing entry');
    $exp->expect($timeout, "Enter New Number")
        or timed_out('no "Enter New Number" callbook prompt after "9" command, zeroing entry');
    $exp->send("0000000");
    $exp->expect($timeout, "Enter all zeros")
        or timed_out('no "Enter all zeros" callbook prompt, zeroed entry "9"');
    
    log_steps("entering radio number");
    
    $exp->send("8");
    $exp->expect($timeout, "8") # number is echoed
        or timed_out('no callbook menu command "8" echo');
    $exp->expect($timeout, "Enter New Number")
        or timed_out('no "Enter New Number" callbook prompt after "8" command');
    $exp->send($radio);
    
    $exp->expect($timeout, "Enter Repeater")
        or timed_out('no "Enter Repeater" callbook prompt, entry "8"');
    
    unless ( @repeater ) { # no repeaters
        $exp->send("\e");
        $exp->expect($timeout, "Enter all zeros")
            or timed_out('no "Enter all zeros" callbook prompt, entry "8", no repeaters');
        # menu state: still in callbook
        } 
    else { # repeaters are called out
        my $n = 0; ## refer to repeaters ordinally, i.e., 1, 2, 3, 4
        while ( defined $repeater[++$n-1] ) {
            log_steps("entering repeater number");
            if ( $n == 1 ) { # enter 1st repeater
                $exp->send($repeater[$n-1]);
                $exp->expect($timeout, "Enter Repeater")
                    or timed_out("no ${n}th \"Enter Repeater\" callbook prompt");
                }
            elsif ( $n == 2 || $n == 4 ) { # transaction concludes after entry
                $exp->send($repeater[$n-1]);
                $exp->expect($timeout, "Enter all zeros")
                    or timed_out("no \"Enter all zeros\" callbook prompt ($n)");
                }
            elsif ( $n == 3 ) { # need to use entry 9
                ## ASSERT: top level callbook menu
                $exp->send("9");
                $exp->expect($timeout, "9") # number is echoed
                    or timed_out("no callbook menu command \"9\" echo, repeater $n");
                $exp->expect($timeout, "Enter New Number")
                    or timed_out("no \"Enter New Number\" callbook prompt after \"9\" command, repeater $n");
                $exp->send("9999999"); ## special value for extended repeater path
                $exp->expect($timeout, "Enter Repeater")
                    or timed_out("no 1st \"Enter Repeater\" callbook prompt, entry \"9\", repeater $n");
                $exp->send($repeater[$n-1]);
                $exp->expect($timeout, "Enter Repeater")
                    or timed_out("no 2nd \"Enter Repeater\" callbook prompt, entry \"9\", repeater $n");
                }
            }
        ## ASSERT: may be at top level or waiting for 2nd or 4th repeater
        if ( @repeater % 2 ) { # odd number of repeaters, 1 or 3
            $exp->send("\e"); # terminate 
            $exp->expect($timeout, "Enter all zeros")
                or timed_out('no callbook menu 2 "Enter all zeros" prompt, ending entries');
            }
        }
    }

## ASSERT: menu state: still in callbook
$exp->send("\e"); # escape back to main menu
$exp->expect($timeout, "Enter Choice")
    or timed_out('no main menu "Enter Choice" prompt, after callbook entries');

$exp->send("\e"); # escape out of config mode to command mode (no response)
$exp->send("\e"); # send another just for good measure??

$timeout = 20;
$timeout = file_contents('@timeout-connect-phase')
    if -e '@timeout-connect-phase';

sleep 1;

my $dial_string = "ATXC${entry}ATD$radio";

log_steps("dial string: $dial_string");

$time_ready2dial = time;

set_property( '@state', 'dial');

$rep_path = '' unless $rep_path; # for output...
push @call_summary, $dial_string, $entry_type, $rep_path;

# $exp->send("ATXC8ATD$radio"); # try to connect to the target radio
$exp->send($dial_string); # try to connect to the target radio
$exp->expect($timeout, "OK")  # command was acted upon
    or timed_out('no "OK" response from ATDT command');
log_steps("saw 'OK'");
$exp->expect($timeout, "CONNECT")  # first radio (target or repeater) reached
    or timed_out('no "CONNECT" response');
log_steps("saw 'CONNECT'");

set_property( '@state', '<prompt?');

my $see_target;
if ( $prompt ) {
    log_steps("sending CR");
    $exp->expect(1, '-re', ".*"); 
    $exp->send("\r");
 #  my $regex_prompt = $prompt;
 #  $regex_prompt =~ s/([?.[\]+*])/\\\\$1/g;
 ## if ( $prompt eq '*' ) {
 ##     print "PROMPT: was: <*> now <$regex_prompt>\n";
 ##     }
 ## $see_target = $exp->expect(1, '-re', ".*$regex_prompt"); 
    $see_target = $exp->expect(1, $prompt); 
  # while ( ! $see_target && --$retries ) {
    while ( ! $see_target ) {
        last unless --$retries;
        log_steps("sending CR ($retries retries)");
        $exp->send("\r"); # try to get a prompt
        $see_target = $exp->expect(1, $prompt); # wait for 1 second
      # print '.'; # progress indicator
        }
    }

if ( $see_target ) {
    # saw prompt, so...
    log_steps("sending 'CONNECTED' to client");
    print "CONNECTED\r\n";
    push @call_summary, 'ok';
    set_property( '@state', 'prompt!');
    }
else {
    log_steps("sending 'NO_PROMPT_SEEN' to client");
  # print "NO_PROMPT_SEEN\r\n";
    log_steps("quitting");
    push @call_summary, 'no';
    log_call_summary();
    set_property( '@state', 'failed');
    set_property( '@last-elapsed', time - $t0);
    print "NO_PROMPT_SEEN\r\n";
    die "bye!\n";
    }

$time_connect = time;

log_steps("client -> $tag interactive ...");

# close previous log file, open another:
$exp->log_file('');
$exp->log_file( "sessions/\@$tag", 'w')
    or warn "failed to open log file: sessions/\@$tag\n";
unlink '@session'
    or warn "failed to remove \@session file\n";
symlink "sessions/\@$tag", '@session'
    or warn "failed to set symlink to sessions/\@$tag\n";

set_property( '@state', '>...<');

$exp->interact(\*STDIN, 'BAIL!');
# $exp->interact();

log_steps("$tag done at " . localtime_hms());

set_property( '@state', 'done');
set_property( '@last-elapsed', time - $t0);

log_call_summary();

exit 0;

sub log_call_summary {
    my ($s, $m, $h, $y, $d) = (localtime $t0)[0, 1, 2, 5, 7];
    my $tmstamp = sprintf "%4d-%03d-%02d:%02d:%02d", $y+1900, $d+1, $h, $m, $s;
    print "DEBUG $tmstamp\n";
    my $tm_up2dial = $time_ready2dial ? $time_ready2dial - $t0 . 's' : '-';
    my $tm_connect = $time_connect ? $time_connect - $t0 . 's' : '-';
    my $tm_total = time - $t0 . 's';
    open CALL_SUMMARY, ">>", CALL_SUMMARY_FILE or die $!;
    print CALL_SUMMARY
        join(',', $tmstamp, @call_summary, $tm_up2dial, $tm_connect, $tm_total),
        "\n";
    close CALL_SUMMARY;
    }

sub timed_out {
    my $msg = shift;
    $msg = 'n/a' unless defined $msg;
    push @call_summary, "timed_out:$msg";
    log_call_summary();
    log_steps("expect() timed out: $msg for $tag at " . localtime_hms());
  # print "ABORTING CONNECTION\r\n";
    $exp->send("\e\e"); # send escapes in case in radio setup mode
    set_property( '@state', 'timeout');
    set_property( '@last-elapsed', time - $t0);
    print "ABORTING CONNECTION\r\n";
    die qq(expect() timed out: $msg\n);
    }

sub log_steps {
    printf STEPS "%d %s\n", time - $t0, "@_";
    }

sub check_radio_number {
    my $number = shift;
    return 0 unless $number =~ m/([0-9]{3})-?([0-9]{4})/;
    return "$1$2";
    }

sub file_contents {
    my $file = shift;
    my @content;
    open FILE, '<', $file
        or die "failed to open $file\n";
    while ( <FILE> ) {
        chomp;
        push @content, $_;
        }
    close FILE or die $!;
    return $content[0] if scalar @content == 1;
    return @content;
    }

sub set_property {
    my $prop = shift;
    my $string = shift;
    if ( open PROP, '>', $prop ) {
        print PROP $string, "\n";
        return close PROP;
        }
    warn "$prop not set to $string; $!\n";
    return 0;
    }

sub localtime_hms {
    return sprintf("%02d:%02d:%02d",(localtime())[2,1,0]);
    }

