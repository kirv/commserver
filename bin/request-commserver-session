#!/usr/bin/expect -f

# request-commserver-session SITE HOST PORT
# connect to commserver via inetd.conf on remote host
# enter 'call site' command at 'query:' prompt
# wait for either PASSED or FAILED string and:
#   if FAILED, exit with status 1
#   if PASSED, exit with status 0
# if --log FILE is given, --log is included in the commserver query,
#   and we expect to see PASSED <RADIO ROUTE> in the return message

set site ""
set host ""
set port ""
set tmout 300
set opts ""
set log ""
set tm0 [clock seconds]

foreach arg $argv {
    regexp {([^=]+)=(.*)} $arg * tag val
    switch -- $tag {
        "--site" { set site $val }
        "--host" { set host $val }
        "--port" { set port $val }
        "--timeout" { set tmout $val }
        "--log" {
            set log $val
            lappend opts --log
            }
        default { lappend opts $arg }
        }
    }

if { $site == "" || $host == "" || $port == "" } {
    puts "synopsis: $argv0 --site=SITE --host=HOST --port=PORT \[--timeout=SEC\] \[--log=FILE\|CMD\] \[...\]"
    exit 1
    }

spawn nc $host $port

set timeout 2
expect {
    timeout { puts "no prompt from server"; exit 1 }
    query: { send "call $site --notify --timeout=$tmout $opts\r" }
    }

proc get_ppid {pid} {
    # extract parent's pid from /proc/$pid/status
    set pstatus [open /proc/$pid/status]
    while {[gets $pstatus line] != -1} {
        if { [string first "PPid:" $line] == 0 } {
            return [string range $line 6 end]
            }
        }
    }

proc get_proc_status_name {pid} {
    set pid_status [open /proc/$pid/status]
    gets $pid_status name
    return [string range $name 6 end]
    }

proc get_caller_name {} {
    set ppid [get_ppid [pid]]
    set name [get_proc_status_name $ppid]
    if {[string compare $name "siterc-cmd"] == 0} {
        set ppid [get_ppid $ppid]
        set name [get_proc_status_name $ppid]
        }
    return $name
    }

proc writelog {msg} {
    global log tm0 env argv0

    if { $log == "" } return

    set app [file tail $argv0]

    # add elapsed time as 'tm=SECONDS' to log message
    set elapsed tm=[expr {[clock seconds] - $tm0}]

    set logmsg [list $app "by=[get_caller_name]" $msg $elapsed]

    # identify user if defined, i.e., not a cron or at job
    if { [info exists env(USER)] } { lappend logmsg "user=$env(USER)" }

    if { [file executable $log] } {
        exec $log [join $logmsg ", "] &
        return
        }

    # compose ISO 8601 timestamp for log message:
    set logmsg [linsert $logmsg 0 [clock format [clock seconds] -format {%Y-%m-%d %T%z}]]

    if [catch {set file [open $log a]} errormsg] {
        puts stderr "$argv0: $errormsg"
        puts stderr [join $logmsg ", "]
        return
        }
    
    puts $file [join $logmsg ", "]
    close $file
    }

set timeout [expr $tmout+10]
expect {
    FAILED { exit 1 }
    "PASSED *" {
        set pos [string first PASSED $expect_out(buffer)]
        set end [string last "\r\n" $expect_out(buffer)]
        writelog [string range $expect_out(buffer) [expr $pos + 7] [expr $end-1]]
        exit 0
        }
    PASSED { exit 0 }
    }

puts "no result from server"
exit 2
